PP = [
    ('translation_unit', 'external_decl'),
    ('translation_unit', 'translation_unit', 'external_decl'),
    ('external_decl', 'function_definition'),
    ('external_decl', 'decl'),
    ('function_definition', 'decl_specs',
     'declarator', 'decl_list', 'compound_stat'),
    ('function_definition', 'declarator', 'decl_list', 'compound_stat'),
    ('function_definition', 'decl_specs', 'declarator', 'compound_stat'),
    ('function_definition', 'declarator', 'compound_stat'),
    ('decl', 'decl_specs', 'init_declarator_list', "';'"),
    ('decl', 'decl_specs', "';'"),
    ('decl_list', 'decl'),
    ('decl_list', 'decl_list', 'decl'),
    ('decl_specs', 'storage_class_spec', 'decl_specs'),
    ('decl_specs', 'storage_class_spec'),
    ('decl_specs', 'type_spec', 'decl_specs'),
    ('decl_specs', 'type_spec'),
    ('decl_specs', 'type_qualifier', 'decl_specs'),
    ('decl_specs', 'type_qualifier'),
    ('storage_class_spec', "'auto'"),
    ('storage_class_spec', "'register'"),
    ('storage_class_spec', "'static'"),
    ('storage_class_spec', "'extern'"),
    ('storage_class_spec', "'typedef'"),
    ('type_spec', "'void'"),
    ('type_spec', "'char'"),
    ('type_spec', "'short'"),
    ('type_spec', "'int'"),
    ('type_spec', "'long'"),
    ('type_spec', "'float'"),
    ('type_spec', "'double'"),
    ('type_spec', "'signed'"),
    ('type_spec', "'unsigned'"),
    ('type_spec', 'struct_or_union_spec'),
    ('type_spec', 'enum_spec'),
    ('type_spec', 'typedef_name'),
    ('type_qualifier', "'const'"),
    ('type_qualifier', "'volatile'"),
    ('struct_or_union_spec', 'struct_or_union',
     'id', "'{'", 'struct_decl_list', "'}'"),
    ('struct_or_union_spec', 'struct_or_union',
     "'{'", 'struct_decl_list', "'}'"),
    ('struct_or_union_spec', 'struct_or_union', 'id'),
    ('struct_or_union', "'struct'"),
    ('struct_or_union', "'union'"),
    ('struct_decl_list', 'struct_decl'),
    ('struct_decl_list', 'struct_decl_list', 'struct_decl'),
    ('init_declarator_list', 'init_declarator'),
    ('init_declarator_list', 'init_declarator_list', "','", 'init_declarator'),
    ('init_declarator', 'declarator'),
    ('init_declarator', 'declarator', "'='", 'initializer'),
    ('struct_decl', 'spec_qualifier_list', 'struct_declarator_list', "';'"),
    ('spec_qualifier_list', 'type_spec', 'spec_qualifier_list'),
    ('spec_qualifier_list', 'type_spec'),
    ('spec_qualifier_list', 'type_qualifier', 'spec_qualifier_list'),
    ('spec_qualifier_list', 'type_qualifier'),
    ('struct_declarator_list', 'struct_declarator'),
    ('struct_declarator_list', 'struct_declarator_list', "','", 'struct_declarator'),
    ('struct_declarator', 'declarator'),
    ('struct_declarator', 'declarator', "':'", 'const_exp'),
    ('struct_declarator', "':'", 'const_exp'),
    ('enum_spec', "'enum'", 'id', "'{'", 'enumerator_list', "'}'"),
    ('enum_spec', "'enum'", "'{'", 'enumerator_list', "'}'"),
    ('enum_spec', "'enum'", 'id'),
    ('enumerator_list', 'enumerator'),
    ('enumerator_list', 'enumerator_list', "','", 'enumerator'),
    ('enumerator', 'id'),
    ('enumerator', 'id', "'='", 'const_exp'),
    ('declarator', 'pointer', 'direct_declarator'),
    ('declarator', 'direct_declarator'),
    ('direct_declarator', 'id'),
    ('direct_declarator', "'('", 'declarator', "')'"),
    ('direct_declarator', 'direct_declarator', "'['", 'const_exp', "']'"),
    ('direct_declarator', 'direct_declarator', "'['", "']'"),
    ('direct_declarator', 'direct_declarator', "'('", 'param_type_list', "')'"),
    ('direct_declarator', 'direct_declarator', "'('", 'id_list', "')'"),
    ('direct_declarator', 'direct_declarator', "'('", "')'"),
    ('pointer', "'*'", 'type_qualifier_list'),
    ('pointer', "'*'"),
    ('pointer', "'*'", 'type_qualifier_list', 'pointer'),
    ('pointer', "'*'", 'pointer'),
    ('type_qualifier_list', 'type_qualifier'),
    ('type_qualifier_list', 'type_qualifier_list', 'type_qualifier'),
    ('param_type_list', 'param_list'),
    ('param_type_list', 'param_list', "','", "'...'"),
    ('param_list', 'param_decl'),
    ('param_list', 'param_list', "','", 'param_decl'),
    ('param_decl', 'decl_specs', 'declarator'),
    ('param_decl', 'decl_specs', 'abstract_declarator'),
    ('param_decl', 'decl_specs'),
    ('id_list', 'id'),
    ('id_list', 'id_list', "','", 'id'),
    ('initializer', 'assignment_exp'),
    ('initializer', "'{'", 'initializer_list', "'}'"),
    ('initializer', "'{'", 'initializer_list', "','", "'}'"),
    ('initializer_list', 'initializer'),
    ('initializer_list', 'initializer_list', "','", 'initializer'),
    ('type_name', 'spec_qualifier_list', 'abstract_declarator'),
    ('type_name', 'spec_qualifier_list'),
    ('abstract_declarator', 'pointer'),
    ('abstract_declarator', 'pointer', 'direct_abstract_declarator'),
    ('abstract_declarator', 'direct_abstract_declarator'),
    ('direct_abstract_declarator', "'('", 'abstract_declarator', "')'"),
    ('direct_abstract_declarator',
     'direct_abstract_declarator', "'['", 'const_exp', "']'"),
    ('direct_abstract_declarator', "'['", 'const_exp', "']'"),
    ('direct_abstract_declarator', 'direct_abstract_declarator', "'['", "']'"),
    ('direct_abstract_declarator', "'['", "']'"),
    ('direct_abstract_declarator', 'direct_abstract_declarator',
     "'('", 'param_type_list', "')'"),
    ('direct_abstract_declarator', "'('", 'param_type_list', "')'"),
    ('direct_abstract_declarator', 'direct_abstract_declarator', "'('", "')'"),
    ('direct_abstract_declarator', "'('", "')'"),
    ('typedef_name', 'id'),
    ('stat', 'labeled_stat'),
    ('stat', 'exp_stat'),
    ('stat', 'compound_stat'),
    ('stat', 'selection_stat'),
    ('stat', 'iteration_stat'),
    ('stat', 'jump_stat'),
    ('labeled_stat', 'id', "':'", 'stat'),
    ('labeled_stat', "'case'", 'const_exp', "':'", 'stat'),
    ('labeled_stat', "'default'", "':'", 'stat'),
    ('exp_stat', 'exp', "';'"),
    ('exp_stat', "';'"),
    ('compound_stat', "'{'", 'decl_list', 'stat_list', "'}'"),
    ('compound_stat', "'{'", 'stat_list', "'}'"),
    ('compound_stat', "'{'", 'decl_list', "'}'"),
    ('compound_stat', "'{'", "'}'"),
    ('stat_list', 'stat'),
    ('stat_list', 'stat_list', 'stat'),
    ('selection_stat', "'if'", "'('", 'exp', "')'", 'stat'),
    ('selection_stat', "'if'", "'('", 'exp', "')'", 'stat', "'else'", 'stat'),
    ('selection_stat', "'switch'", "'('", 'exp', "')'", 'stat'),
    ('iteration_stat', "'while'", "'('", 'exp', "')'", 'stat'),
    ('iteration_stat', "'do'", 'stat', "'while'", "'('", 'exp', "')'", "';'"),
    ('iteration_stat', "'for'", "'('", 'exp',
     "';'", 'exp', "';'", 'exp', "')'", 'stat'),
    ('iteration_stat', "'for'", "'('", 'exp', "';'", 'exp', "';'", "')'", 'stat'),
    ('iteration_stat', "'for'", "'('", 'exp', "';'", "';'", 'exp', "')'", 'stat'),
    ('iteration_stat', "'for'", "'('", 'exp', "';'", "';'", "')'", 'stat'),
    ('iteration_stat', "'for'", "'('", "';'", 'exp', "';'", 'exp', "')'", 'stat'),
    ('iteration_stat', "'for'", "'('", "';'", 'exp', "';'", "')'", 'stat'),
    ('iteration_stat', "'for'", "'('", "';'", "';'", 'exp', "')'", 'stat'),
    ('iteration_stat', "'for'", "'('", "';'", "';'", "')'", 'stat'),
    ('jump_stat', "'goto'", 'id', "';'"),
    ('jump_stat', "'continue'", "';'"),
    ('jump_stat', "'break'", "';'"),
    ('jump_stat', "'return'", 'exp', "';'"),
    ('jump_stat', "'return'", "';'"),
    ('exp', 'assignment_exp'),
    ('exp', 'exp', "','", 'assignment_exp'),
    ('assignment_exp', 'conditional_exp'),
    ('assignment_exp', 'unary_exp', 'assignment_operator', 'assignment_exp'),
    ('assignment_operator', "'='"),
    ('assignment_operator', "'*='"),
    ('assignment_operator', "'/='"),
    ('assignment_operator', "'%='"),
    ('assignment_operator', "'+='"),
    ('assignment_operator', "'-='"),
    ('assignment_operator', "'<<='"),
    ('assignment_operator', "'>>='"),
    ('assignment_operator', "'&='"),
    ('assignment_operator', "'^='"),
    ('assignment_operator', "'|='"),
    ('conditional_exp', 'logical_or_exp'),
    ('conditional_exp', 'logical_or_exp', "'?'", 'exp', "':'", 'conditional_exp'),
    ('const_exp', 'conditional_exp'),
    ('logical_or_exp', 'logical_and_exp'),
    ('logical_or_exp', 'logical_or_exp', "'||'", 'logical_and_exp'),
    ('logical_and_exp', 'inclusive_or_exp'),
    ('logical_and_exp', 'logical_and_exp', "'&&'", 'inclusive_or_exp'),
    ('inclusive_or_exp', 'exclusive_or_exp'),
    ('inclusive_or_exp', 'inclusive_or_exp', "'|'", 'exclusive_or_exp'),
    ('exclusive_or_exp', 'and_exp'),
    ('exclusive_or_exp', 'exclusive_or_exp', "'^'", 'and_exp'),
    ('and_exp', 'equality_exp'),
    ('and_exp', 'and_exp', "'&'", 'equality_exp'),
    ('equality_exp', 'relational_exp'),
    ('equality_exp', 'equality_exp', "'=='", 'relational_exp'),
    ('equality_exp', 'equality_exp', "'!='", 'relational_exp'),
    ('relational_exp', 'shift_expression'),
    ('relational_exp', 'relational_exp', "'<'", 'shift_expression'),
    ('relational_exp', 'relational_exp', "'>'", 'shift_expression'),
    ('relational_exp', 'relational_exp', "'<='", 'shift_expression'),
    ('relational_exp', 'relational_exp', "'>='", 'shift_expression'),
    ('shift_expression', 'additive_exp'),
    ('shift_expression', 'shift_expression', "'<<'", 'additive_exp'),
    ('shift_expression', 'shift_expression', "'>>'", 'additive_exp'),
    ('additive_exp', 'mult_exp'),
    ('additive_exp', 'additive_exp', "'+'", 'mult_exp'),
    ('additive_exp', 'additive_exp', "'-'", 'mult_exp'),
    ('mult_exp', 'cast_exp'),
    ('mult_exp', 'mult_exp', "'*'", 'cast_exp'),
    ('mult_exp', 'mult_exp', "'/'", 'cast_exp'),
    ('mult_exp', 'mult_exp', "'%'", 'cast_exp'),
    ('cast_exp', 'unary_exp'),
    ('cast_exp', "'('", 'type_name', "')'", 'cast_exp'),
    ('unary_exp', 'postfix_exp'),
    ('unary_exp', "'++'", 'unary_exp'),
    ('unary_exp', "'--'", 'unary_exp'),
    ('unary_exp', 'unary_operator', 'cast_exp'),
    ('unary_exp', "'sizeof'", 'unary_exp'),
    ('unary_exp', "'sizeof'", "'('", 'type_name', "')'"),
    ('unary_operator', "'&'"),
    ('unary_operator', "'*'"),
    ('unary_operator', "'+'"),
    ('unary_operator', "'-'"),
    ('unary_operator', "'~'"),
    ('unary_operator', "'!'"),
    ('postfix_exp', 'primary_exp'),
    ('postfix_exp', 'postfix_exp', "'['", 'exp', "']'"),
    ('postfix_exp', 'postfix_exp', "'('", 'argument_exp_list', "')'"),
    ('postfix_exp', 'postfix_exp', "'('", "')'"),
    ('postfix_exp', 'postfix_exp', "'.'", 'id'),
    ('postfix_exp', 'postfix_exp', "'->'", 'id'),
    ('postfix_exp', 'postfix_exp', "'++'"),
    ('postfix_exp', 'postfix_exp', "'--'"),
    ('primary_exp', 'id'),
    ('primary_exp', 'const'),
    ('primary_exp', 'string'),
    ('primary_exp', "'('", 'exp', "')'"),
    ('argument_exp_list', 'assignment_exp'),
    ('argument_exp_list', 'argument_exp_list', "','", 'assignment_exp'),
    ('const', 'int_const'),
    ('const', 'char_const'),
    ('const', 'float_const'),
    ('const', 'enumeration_const')
]


from parser.symbol import NullableSet, First, Follow
from parser.tools import make_transform_table
TERMINAL = set()
NT = set()
for l,*r in PP:
    NT.add(l)
    for i in r: 
        TERMINAL.add(i)

TERMINAL = TERMINAL - NT
Nullable = NullableSet(PP)
FIRST = First(PP, TERMINAL, Nullable)
FOLLOW = Follow(PP,FIRST, TERMINAL, Nullable)


# exp = None
# try:
#     res = make_transform_table(PP, FIRST, TERMINAL, Nullable,'translation_unit')
# except Exception as e:
#     exp = e
#     print('error')