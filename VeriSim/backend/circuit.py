from math import sqrt, ceil
from component import Comp, Port


class Tunnel(Comp):
    """
    Tunnel is used to combine two ports in a simple way.
    """
    
    def __init__(self, width: int, label: str, output: bool, loc=None):
        """
        Parameter:
        output set to true means the tunnel port is used as the source of a
        data stream.
        """
        super(Tunnel, self).__init__("Tunnel", Comp.Lib.WIRING)
        self.width = width
        self.label = label
        if output == True:
            self.facing = Comp.Facing.EAST
        else:
            self.facing = Comp.Facing.WEST
        self.loc = loc


class Circuit(object):
    """
    Circuit locate the components according to the graph generated by paser.
    """
    __BLOCK_SIZ = 100
    __ORIGIN = {"x": 100, "y": 100}

    def __init__(self, inputs: list):
        self.inputs = inputs

    def wiring(self):
        pass

    def locator_tunnel_strategy(self):
        """
        Allocate position for components using tunnel strategy.
        """
        # Put all the components into the list comps.
        comps = list(self.inputs)
        i = 0
        while i < len(comps):
            downs = comps[i].get_downstream_comps()
            for elem in downs:
                if elem not in comps:
                    comps.append(elem)
        # Distribute components to the canvas.
        square = ceil(sqrt(len(comps)))
        comps_loc = dict()
        for i in range(len(comps)):
            x = (i // square) * Circuit.__BLOCK_SIZ
            y = (i % square) * Circuit.__BLOCK_SIZ
            comps_loc.setdefault(comps[i], (x, y))